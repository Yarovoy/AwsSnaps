#!/usr/bin/groovy

@Grapes([
@Grab(group = 'com.amazonaws', module = 'aws-java-sdk', version = '1.1.9'),
@Grab(group = 'stax', module = 'stax', version = '1.2.0'),
@GrabExclude("org.codehaus.groovy:groovy")
])

import DefaultArguments as DA

import com.amazonaws.auth.PropertiesCredentials
import com.amazonaws.services.ec2.AmazonEC2Client
import com.amazonaws.services.ec2.model.Snapshot
import com.amazonaws.services.ec2.model.DescribeSnapshotsRequest
import com.amazonaws.services.ec2.model.Filter

// ----------------------------------------------------------------------
// Inline classes
// ----------------------------------------------------------------------

class DefaultArguments
{
	public static final int weeks = 1
	public static final int days = 0
	public static final int hours = 0
	public static final List availableRegions = ['us-east-1', 'us-west-1', 'eu-west-1', 'ap-southeast-1']
	public static final String region = availableRegions[0]
	public static final String credentials = './AwsCredentials.properties'
}

class EbsSnapshot
{
	String id
	String volumeId
	String regionId
	Date expirationDate = new Date()

	EbsSnapshot()
	{}

	void take()
	{
		// Create snapshot first.
		String[] command = [
				'ec2addsnap',
				volumeId,
				'--region', regionId,
				'-K', System.getenv('EC2_PRIVATE_KEY'),
				'-C', System.getenv('EC2_CERT'),
				'--debug',
				'--description', "Backup of volume '$volumeId' created with EbsSnap Groovy script."
		]

		println "Taking snapshot for the given volume..."

		Process process = command.execute()

		if (process.waitFor())
		{
			process.errorStream.eachLine {println it}
			println "Process finished with code ${process.exitValue()}"
		}
		else
		{
			String outputText = process.text
			id = outputText.find(~/snap-\w+/)
			println "Done."

			println "Updating metadata of the snapshot..."

			// Then set value of 'expirationDate' tag at the snapshot.
			command = [
					'ec2-create-tags',
					id,
					'--region', regionId,
					'-K', System.getenv('EC2_PRIVATE_KEY'),
					'-C', System.getenv('EC2_CERT'),
					'--tag', "expirationDate=${expirationDate.toGMTString()}",
			]

			process = command.execute()
			if (process.waitFor())
			{
				process.errorStream.eachLine {println it}
				println "Process finished with code ${process.exitValue()}"
			}
			else
			{
				println "Done."
			}
		}
	}
}

class EnvironmentException extends Exception
{
	EnvironmentException(String message)
	{
		super(message)
	}
}

class ShowHelpException extends Exception
{}

// ----------------------------------------------------------------------
// Script's variables
// ----------------------------------------------------------------------

// Values parsed from arguments.
String regionId

String credentialsPath
PropertiesCredentials credentials

List volumeIds = []

int weeks = DA.weeks
int days = DA.days
int hours = DA.hours

Boolean isVerbose = false

// Another variables.
int retainHours

// Create and configure command-line integration builder.
CliBuilder cli = new CliBuilder()
cli.with {
	usage = "ebssnap [OPTIONS] <EBS_VOLUME_ID_1> [… <EBS_VOLUME_ID_N>]"
	c(longOpt: 'credentials', args: 1, argName: 'PATH', "Path to AWS credentials file. Default value is '$DA.credentials'.")
	d(longOpt: 'days', args: 1, argName: 'DAYS', "Number of days to retain the snapshot. Default value is $DA.days.")
	h(longOpt: 'help', "Print this message")
	o(longOpt: 'hours', args: 1, argName: 'HOURS', "Number of hours to retain the snapshot. Default value is $DA.hours.")
	r(longOpt: 'region', args: 1, argName: 'REGION', "Code of region where the volume will be placed. Possible values: ${DA.availableRegions.collect {"'$it'"}.join(", ")}. Default value is '$DA.region'.")
	u(longOpt: 'usage', "Print this message")
	v(longOpt: 'verbose', 'Enable a verbose mode of script executing.')
	w(longOpt: 'weeks', args: 1, argName: 'WEEKS', "Number of weeks to retain the snapshot. Default value is $DA.weeks.")
}

// ----------------------------------------------------------------------
// Script's closures
// ----------------------------------------------------------------------

def printMessageIfNeed = {String message ->
	if (isVerbose)
	{
		println message
	}
}

def checkEnvironment = {
	/*String JAVA_HOME = System.getenv("JAVA_HOME")
	if (!JAVA_HOME)
	{
		throw new EnvironmentException("Environment variable JAVA_HOME is not set. You must set it before.")
	}*/
}

def parseCliArguments = { String[] arguments ->

	OptionAccessor options = cli.parse(arguments)

	if (!options)
	{
		throw new IllegalArgumentException("Arguments are incorrect.")
	}

	if (options.h || options.u)
	{
		throw new ShowHelpException()
	}

	if (!options.arguments()
			|| !options.arguments().size())
	{
		throw new IllegalArgumentException("You must specify at least one correct <EBS_VOLUME_ID> argument!")
	}

	volumeIds = options.arguments()

	regionId = options.r ?: DA.region
	credentialsPath = options.c ?: DA.credentials
	isVerbose = options.v ? true : false

	if (options.w || options.d || options.o)
	{
		weeks = options.w ? options.w?.toInteger() : 0
		days = options.d ? options.d?.toInteger() : 0
		hours = options.o ? options.o?.toInteger() : 0
	}

	retainHours = weeks * 7 * 24 + days * 24 + hours

	if (retainHours <= 0)
	{
		throw new IllegalArgumentException("Incorrect retain period! Must be larger than 0 hours.")
	}
}

def loadCredentials = {

	printMessageIfNeed 'Reading credentials file…'

	File credentialsFile = new File(credentialsPath)
	if (!credentialsFile.exists())
	{
		throw new IllegalArgumentException("AWS credentials file does not exist: '$credentialsPath'.")
	}

	credentials = new PropertiesCredentials(credentialsFile)

	printMessageIfNeed 'Done.'
}

def createSnapshots = {
	AmazonEC2Client ec2Client = new AmazonEC2Client(credentials)
	ec2Client.endpoint = "ec2.${regionId}.amazonaws.com"

	ec2Client.describeSnapshots(new DescribeSnapshotsRequest(ownerIds: ['self'])).snapshots.each {Snapshot snapshot ->
		println "$snapshot.snapshotId $snapshot.volumeId $snapshot.state ${snapshot.ownerId}"
	}


	/*printMessageIfNeed "Createing snapshot of volume \"$volumeId\" in region \"$regionId\" and retain it for $weeks weeks, $days days and $hours hours ($retainHours hour(s) in all)."

	Date expirationDate = new Date()
	expirationDate.date += (weeks * 7 + days)
	expirationDate.hours += hours
	EbsSnapshot ebsSnapshot = new EbsSnapshot(volumeId: volumeId, regionId: regionId, expirationDate: expirationDate)
	ebsSnapshot.take()*/
}

def deleteExpiredSnapshots = {
	println "Looking for expired snapshots to remove..."

	String[] command = [
			'ec2-describe-snapshots',
			'--region', regionId,
			'-K', System.getenv('EC2_PRIVATE_KEY'),
			'-C', System.getenv('EC2_CERT'),
			'-o', 'self',
			'--filter', 'tag-key=expirationDate'
	]

	println "--------"

	Process process = command.execute()
	if (process.waitFor())
	{
		process.errorStream.eachLine {println it}
		println "Process finished with code ${process.exitValue()}"
	}
	else
	{
		List expiredSnapshots = []
		String outputText = process.text

		outputText.eachMatch(~/TAG.+snapshot\s(snap-\w+)\s+expirationDate\s+(\d{1,2} \w{3} \d{4} \d{2}:\d{2}:\d{2} GMT)/) {
			String snapshotId = it[1]
			Date expirationDate = new Date((String) it[2])

			if (snapshotId && expirationDate && expirationDate < new Date())
			{
				expiredSnapshots << snapshotId
			}
		}

		if (expiredSnapshots.size())
		{
			println "There are ${expiredSnapshots.size()} snapshots to remove."
			sleep 300
			for (int i = 0; i < expiredSnapshots.size(); i++)
			{
				println "Deleting snapshot ${i + 1} of ${expiredSnapshots.size()}..."

				command = [
						'ec2-delete-snapshot',
						expiredSnapshots[i],
						'--region', regionId,
						'-K', System.getenv('EC2_PRIVATE_KEY'),
						'-C', System.getenv('EC2_CERT'),
				]
				process = command.execute()
				if (process.waitFor())
				{
					process.errorStream.eachLine {println it}
					println "Process finished with code ${process.exitValue()}"
				}
				else
				{
					println "Done."
					sleep 300
				}
			}
		}
		else
		{
			println "Nothing to remove."
		}
	}
}

// ----------------------------------------------------------------------
// Executable code
// ----------------------------------------------------------------------

try
{
	checkEnvironment()
	parseCliArguments(args)
	loadCredentials()
	createSnapshots()
	//	deleteExpiredSnapshots()
	sleep 300
	printMessageIfNeed "All operations completed successfuly. Bye!"
}
catch (IllegalArgumentException e)
{
	println e.message
	cli.usage()
}
catch (ShowHelpException e)
{
	cli.usage()
}
catch (EnvironmentException e)
{
	println e.message
	println "Attention! The following environment variables are used by the ec2 tools: JAVA_HOME, EC2_HOME, EC2_PRIVATE_KEY, EC2_CERT."
}