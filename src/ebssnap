#!/usr/bin/groovy

@Grapes([
@Grab(group = 'com.amazonaws', module = 'aws-java-sdk', version = '1.3.8'),
@Grab(group = 'stax', module = 'stax', version = '1.2.0'),
@GrabExclude("org.codehaus.groovy:groovy")
])

import DefaultArguments as DA

import com.amazonaws.AmazonClientException
import com.amazonaws.auth.PropertiesCredentials
import com.amazonaws.services.ec2.AmazonEC2Client
import com.amazonaws.services.ec2.model.*

// ----------------------------------------------------------------------
// Inline classes
// ----------------------------------------------------------------------

class DefaultArguments
{
	public static final int months = 0
	public static final int weeks = 1
	public static final int days = 0
	public static final int hours = 0
	public static final List availableRegions = ['us-east-1', 'us-west-1', 'eu-west-1', 'ap-southeast-1', 'ap-northeast-1']
	public static final String region = availableRegions[0]
	public static final String credentials = './AwsCredentials.properties'
}

class ShowHelpException extends Exception
{}

// ----------------------------------------------------------------------
// Script's variables
// ----------------------------------------------------------------------

// Values parsed from arguments.
String regionId

String credentialsPath
PropertiesCredentials credentials

List volumeIds = []

int months = DA.months
int weeks = DA.weeks
int days = DA.days
int hours = DA.hours

String name = null

Boolean isVerbose = false

// Another variables.
final String SNAPSHOT_NAME_TAG_NAME = 'Name'
final String EXPIRATION_DATE_TAG_NAME = 'expirationDate'

// Create and configure command-line integration builder.
CliBuilder cli = new CliBuilder()
cli.with {
	usage = "ebssnap [OPTIONS] <EBS_VOLUME_ID_1> [… <EBS_VOLUME_ID_N>]"
	c(longOpt: 'credentials', args: 1, argName: 'PATH', "Path to AWS credentials file. Default value is '$DA.credentials'.")
	d(longOpt: 'days', args: 1, argName: 'DAYS', "Number of days to retain the snapshot. Default value is $DA.days.")
	h(longOpt: 'help', "Print this message.")
	o(longOpt: 'hours', args: 1, argName: 'HOURS', "Number of hours to retain the snapshot. Default value is $DA.hours.")
	m(longOpt: 'months', args: 1, argName: 'MONTHS', "Number of months to retain the snapshot. Default value is $DA.months.")
	n(longOpt: 'name', args: 1, argName: 'NAME', "Name of the snapshot. In case this parameter is speecified, it will be assigned to tag 'Name' of the snapshot. Not specified by default.")
	r(longOpt: 'region', args: 1, argName: 'REGION', "Code of region where the EBS volume is placed. Possible values: ${DA.availableRegions.collect {"'$it'"}.join(", ")}. Default value is '$DA.region'.")
	u(longOpt: 'usage', "Print this message.")
	v(longOpt: 'verbose', 'Enable a verbose mode for this util.')
	w(longOpt: 'weeks', args: 1, argName: 'WEEKS', "Number of weeks to retain the snapshot. Default value is $DA.weeks.")
}

// ----------------------------------------------------------------------
// Script's closures
// ----------------------------------------------------------------------

def printInVerboseMode = {String message ->
	if (isVerbose)
	{
		println message
	}
}

def parseCliArguments = { String[] arguments ->

	OptionAccessor options = cli.parse(arguments)

	if (!options)
	{
		throw new IllegalArgumentException("Arguments are incorrect.")
	}

	if (options.h || options.u)
	{
		throw new ShowHelpException()
	}

	if (!options.arguments()
			|| !options.arguments().size())
	{
		throw new IllegalArgumentException("You must specify at least one correct <EBS_VOLUME_ID> argument!")
	}

	volumeIds = options.arguments()

	if (volumeIds.unique().size() != volumeIds.size())
	{
		throw new IllegalArgumentException("Values passed as <EBS_VOLUME_ID> arguments must be unique!")
	}

	regionId = options.r ?: DA.region

	if (!DA.availableRegions.contains(regionId))
	{
		throw new IllegalArgumentException("Value '$regionId' of '--region' argument is incorrect! Possible values of this argument: ${DA.availableRegions.collect {"'$it'"}.join(", ")}.")
	}

	credentialsPath = options.c ?: DA.credentials
	isVerbose = options.v ? true : false

	if (options.name)
	{
		name = options.name
	}

	if (options.m || options.w || options.d || options.o)
	{
		months = options.m ? options.m?.toInteger() : 0
		weeks = options.w ? options.w?.toInteger() : 0
		days = options.d ? options.d?.toInteger() : 0
		hours = options.o ? options.o?.toInteger() : 0
	}

	final int hoursToRetain = months * 30 * 24 + weeks * 7 * 24 + days * 24 + hours

	if (hoursToRetain <= 0)
	{
		throw new IllegalArgumentException("Incorrect retain period! It must be larger than 0 hours.")
	}
}

def loadCredentials = {

	printInVerboseMode 'Reading credentials file…'

	File credentialsFile = new File(credentialsPath)
	if (!credentialsFile.exists())
	{
		throw new IllegalArgumentException("AWS credentials file does not exist: '$credentialsPath'.")
	}

	credentials = new PropertiesCredentials(credentialsFile)

	printInVerboseMode 'Done.'
}

def createSnapshots = {
	printInVerboseMode 'Start creating snapshots.'

	AmazonEC2Client ec2Client = new AmazonEC2Client(credentials)
	ec2Client.endpoint = "ec2.${regionId}.amazonaws.com"

	Date expirationDate = new Date()
	expirationDate.month += months
	expirationDate.date += (weeks * 7 + days)
	expirationDate.hours += hours

	volumeIds.each {String volumeId ->
		printInVerboseMode "Creating snapshot of volume \"$volumeId\" in region \"$regionId\" and retain it for $months months, $weeks weeks, $days days and $hours hours…"

		final CreateSnapshotRequest request = new CreateSnapshotRequest(volumeId, "Automatically created by ebssnap script.")

		printInVerboseMode 'Taking snapshot for the given volume…'
		final Snapshot snapshot = ec2Client.createSnapshot(request).snapshot
		printInVerboseMode 'Done.'

		printInVerboseMode 'Updating metadata tags of the snapshot…'
		try
		{
			List tags = [new Tag(EXPIRATION_DATE_TAG_NAME, expirationDate.toGMTString())]
			if (name)
			{
				tags << new Tag(SNAPSHOT_NAME_TAG_NAME, name)
			}

			ec2Client.createTags(
					new CreateTagsRequest(
							[snapshot.snapshotId],
							tags
					))
			printInVerboseMode 'Done.'
		}
		catch (AmazonClientException e)
		{
			println "Cannot create exiration tag for snapshot '$snapshot.snapshotId'. Try to remove the snapshot…"
			ec2Client.deleteSnapshot(new DeleteSnapshotRequest(snapshot.snapshotId))
			println 'Done.'
			throw e
		}
	}
}

def deleteExpiredSnapshots = {
	printInVerboseMode "Looking for expired snapshots to delete…"

	AmazonEC2Client ec2Client = new AmazonEC2Client(credentials)
	ec2Client.endpoint = "ec2.${regionId}.amazonaws.com"

	final DescribeSnapshotsRequest request = new DescribeSnapshotsRequest(ownerIds: ['self'])

	final List expiredSnapshots = ec2Client.describeSnapshots(request).snapshots.findAll {Snapshot snapshot ->
		snapshot.tags &&
				snapshot.tags.find {
					it.key == EXPIRATION_DATE_TAG_NAME &&
							it.value
				} &&
				(new Date(snapshot.tags.find {
					it.key == EXPIRATION_DATE_TAG_NAME
				}.value) < new Date())
	}

	if (!expiredSnapshots)
	{
		printInVerboseMode "Nothing to delete."
		return
	}

	printInVerboseMode "There are ${expiredSnapshots.size()} snapshots to delete."
	expiredSnapshots.eachWithIndex {Snapshot snapshot, int index ->
		printInVerboseMode "Deleting snapshot ${index + 1} of ${expiredSnapshots.size()}…"
		ec2Client.deleteSnapshot(new DeleteSnapshotRequest(snapshot.snapshotId))
		printInVerboseMode 'Done.'
	}
}

// ----------------------------------------------------------------------
// Executable code
// ----------------------------------------------------------------------

try
{
	parseCliArguments(args)
	loadCredentials()
	createSnapshots()
	deleteExpiredSnapshots()
	printInVerboseMode "All operations completed successfully. Bye!"
}
catch (ShowHelpException e)
{
	cli.usage()
}
catch (Exception e)
{
	println "ERROR: $e.message"
}