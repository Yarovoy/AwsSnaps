#!/usr/bin/groovy

@Grapes([
@Grab(group = 'com.amazonaws', module = 'aws-java-sdk', version = '1.1.9'),
@Grab(group = 'stax', module = 'stax', version = '1.2.0'),
@GrabExclude("org.codehaus.groovy:groovy")
])

import DefaultArguments as DA

import com.amazonaws.auth.PropertiesCredentials
import com.amazonaws.services.rds.AmazonRDSClient
import com.amazonaws.services.rds.model.CreateDBSnapshotRequest
import com.amazonaws.services.rds.model.DBSnapshot
import com.amazonaws.services.rds.model.DeleteDBSnapshotRequest
import com.amazonaws.services.rds.model.DescribeDBSnapshotsRequest
import java.text.SimpleDateFormat

// ----------------------------------------------------------------------
// Inline classes
// ----------------------------------------------------------------------

class DefaultArguments
{
	public static final int weeks = 1
	public static final int days = 0
	public static final int hours = 0
	public static final List availableRegions = ['us-east-1', 'us-west-1', 'eu-west-1', 'ap-southeast-1', 'ap-northeast-1']
	public static final String region = availableRegions[0]
	public static final String credentials = './AwsCredentials.properties'
}

class ShowHelpException extends Exception
{}

// ----------------------------------------------------------------------
// Script's variables
// ----------------------------------------------------------------------

// Values parsed from arguments.
String regionId

String credentialsPath
PropertiesCredentials credentials

List instanceIds = []

int weeks = DA.weeks
int days = DA.days
int hours = DA.hours

Boolean isVerbose = false

// Another variables.
final String expirationDatePattern = 'yyyy-MM-dd-HH-mm-z'
final String timeZoneString = 'GMT'
int retainHours

// Create and configure command-line integration builder.
CliBuilder cli = new CliBuilder()
cli.with {
	usage = "rdssnap [OPTIONS] <RDS_INSTANCE_ID_1> [… <RDS_INSTANCE_ID_N>]"
	c(longOpt: 'credentials', args: 1, argName: 'PATH', "Path to AWS credentials file. Default value is '$DA.credentials'.")
	d(longOpt: 'days', args: 1, argName: 'DAYS', "Number of days to retain the snapshot. Default value is $DA.days.")
	h(longOpt: 'help', "Print this message.")
	o(longOpt: 'hours', args: 1, argName: 'HOURS', "Number of hours to retain the snapshot. Default value is $DA.hours.")
	r(longOpt: 'region', args: 1, argName: 'REGION', "Code of region where the volume will be placed. Possible values: ${DA.availableRegions.collect {"'$it'"}.join(", ")}. Default value is '$DA.region'.")
	u(longOpt: 'usage', "Print this message.")
	v(longOpt: 'verbose', 'Enable a verbose mode of script executing.')
	w(longOpt: 'weeks', args: 1, argName: 'WEEKS', "Number of weeks to retain the snapshot. Default value is $DA.weeks.")
}

// ----------------------------------------------------------------------
// Script's closures
// ----------------------------------------------------------------------

def printInVerboseMode = {String message ->
	if (isVerbose)
	{
		println message
	}
}

def parseCliArguments = { String[] arguments ->

	OptionAccessor options = cli.parse(arguments)

	if (!options)
	{
		throw new IllegalArgumentException("Arguments are incorrect.")
	}

	if (options.h || options.u)
	{
		throw new ShowHelpException()
	}

	if (!options.arguments()
			|| !options.arguments().size())
	{
		throw new IllegalArgumentException("You must specify at least one correct <RDS_INSTANCE_ID> argument!")
	}

	instanceIds = options.arguments()

	if (instanceIds.unique().size() != instanceIds.size())
	{
		throw new IllegalArgumentException("Values passed as <RDS_INSTANCE_ID> arguments must be unique!")
	}

	regionId = options.r ?: DA.region

	if (!DA.availableRegions.contains(regionId))
	{
		throw new IllegalArgumentException("Value '$regionId' of '--region' argument is incorrect! Possible values of this argument: ${DA.availableRegions.collect {"'$it'"}.join(", ")}.")
	}

	credentialsPath = options.c ?: DA.credentials
	isVerbose = options.v ? true : false

	if (options.w || options.d || options.o)
	{
		weeks = options.w ? options.w?.toInteger() : 0
		days = options.d ? options.d?.toInteger() : 0
		hours = options.o ? options.o?.toInteger() : 0
	}

	retainHours = weeks * 7 * 24 + days * 24 + hours

	if (retainHours <= 0)
	{
		throw new IllegalArgumentException("Incorrect retain period! It must be larger than 0 hours.")
	}
}

def loadCredentials = {

	printInVerboseMode 'Reading credentials file…'

	File credentialsFile = new File(credentialsPath)
	if (!credentialsFile.exists())
	{
		throw new IllegalArgumentException("AWS credentials file does not exist: '$credentialsPath'.")
	}

	credentials = new PropertiesCredentials(credentialsFile)

	printInVerboseMode 'Done.'
}

def createSnapshots = {
	printInVerboseMode 'Start creating snapshots.'

	AmazonRDSClient rdsClient = new AmazonRDSClient(credentials)
	rdsClient.endpoint = "rds.${regionId}.amazonaws.com"

	Date expirationDate = new Date()
	expirationDate.date += (weeks * 7 + days)
	expirationDate.hours += hours
	//	expirationDate.minutes += 3

	SimpleDateFormat sdf = new SimpleDateFormat(expirationDatePattern)
	sdf.timeZone = TimeZone.getTimeZone(timeZoneString)
	sdf.format(expirationDate)

	instanceIds.each {String instanceId ->
		printInVerboseMode "Createing dbSnapshot for instance \"$instanceId\" in region \"$regionId\" and retain it for $weeks weeks, $days days and $hours hours ($retainHours hour(s) in all)…"

		final CreateDBSnapshotRequest request = new CreateDBSnapshotRequest("rdssnap-$instanceId-${sdf.format(expirationDate)}", instanceId)

		rdsClient.createDBSnapshot(request)

		printInVerboseMode 'Done.'
	}
}

def deleteExpiredSnapshots = {
	printInVerboseMode "Looking for expired snapshots to delete…"

	AmazonRDSClient rdsClient = new AmazonRDSClient(credentials)
	rdsClient.endpoint = "rds.${regionId}.amazonaws.com"

	final List expiredSnapshots = []

	rdsClient.describeDBSnapshots(new DescribeDBSnapshotsRequest()).DBSnapshots.each {DBSnapshot dbSnapshot ->

		println "Snapshot '$dbSnapshot.DBSnapshotIdentifier' of instance '$dbSnapshot.DBInstanceIdentifier'"

		dbSnapshot.DBSnapshotIdentifier.eachMatch(~/rdssnap-(\w+)-(\d{4}-\d{2}-\d{2}-\d{2}-\d{2}-\w+)/) {
			final Date expirationDate = Date.parse(expirationDatePattern, it[2])
			if (expirationDate < new Date())
			{
				expiredSnapshots << dbSnapshot
			}
		}
	}

	if (!expiredSnapshots)
	{
		printInVerboseMode "Nothing to delete."
		return
	}

	printInVerboseMode "There are ${expiredSnapshots.size()} snapshot(s) to delete."
	expiredSnapshots.eachWithIndex {DBSnapshot dbSnapshot, int index ->

		printInVerboseMode "Deleting snapshot ${index + 1} of ${expiredSnapshots.size()}…"
		rdsClient.deleteDBSnapshot(new DeleteDBSnapshotRequest(dbSnapshot.DBSnapshotIdentifier))
		printInVerboseMode 'Done.'
	}
}

// ----------------------------------------------------------------------
// Executable code
// ----------------------------------------------------------------------

try
{
	parseCliArguments(args)
	loadCredentials()
	createSnapshots()
	deleteExpiredSnapshots()
	sleep 300
	printInVerboseMode "All operations completed successfuly. Bye!"
}
catch (ShowHelpException e)
{
	cli.usage()
}
catch (Exception e)
{
	println "ERROR: $e.message"
}